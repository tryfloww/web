generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  collaborators Collaborator[]
  ownedChannels YoutubeChannel[]
  sentInvites   Invite[]  @relation("SentInvites")
  receivedInvites Invite[] @relation("ReceivedInvites")
}

model Session {
  id            String    @id @default(uuid())
  userId        String
  type          String  
  accessToken   String
  refreshToken  String?
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Invite {
  id        String   @id @default(uuid())
  recId     String 
  senId     String
  createdAt DateTime @default(now())
  role      String
  receiver  User     @relation("ReceivedInvites", fields: [recId], references: [id])
  sender    User     @relation("SentInvites", fields: [senId], references: [id])
}

model YoutubeChannel {
  id              String        @id @default(uuid())
  youtubeId       String        @unique
  accessToken     String
  refreshToken    String?
  expiresAt       Int
  name            String
  image           String?
  subscriberCount Int           @default(0)
  owner           User          @relation(fields: [ownerId], references: [id])
  ownerId         String
  permissions     Role[]
  collaborators   Collaborator[]
}

model Role {
  id               String        @id @default(uuid())
  name             String        @default("New Role")
  hex              String        @default("#dc2626")
  channel          YoutubeChannel @relation(fields: [channelId], references: [id])
  channelId        String
  uploadThumbnail  Int           @default(0)
  uploadBanners    Int           @default(0)
  updateCaptions   Int           @default(0)
  deleteCaptions   Int           @default(0)
  uploadVideo      Int           @default(0)
  updateVideo      Int           @default(0)
  deleteVideo      Int           @default(0)
  watermarks       Int           @default(0)
  playlistItems    Int           @default(0)
  playlists        Int           @default(0)
  playlistImages   Int           @default(0)
  collaborators    Collaborator[]
}

model Collaborator {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  channel   YoutubeChannel @relation(fields: [channelId], references: [id])
  channelId String
  role      Role          @relation(fields: [roleId], references: [id])
  roleId    String
}
